<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40016643-CH2">&#x200c;</a><a id="TP40016643-CH2-ID1">&#x200c;</a>
    <h2 class="chapter-name">Una panoramica su Swift</h2>
      
      	<section class="section">
      		<p class="para">La tradizione suggerisce che il primo programma scritto in un nuovo linguaggio debba stampare a schermo le parole "Hello, world!" (<i>Ciao, mondo!</i>). In Swift, questo può essere fatto in una sola riga di codice:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="vc">print</code>(<code class="s">&quot;Hello, world!&quot;</code>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">Se hai già scritto codice in C o Objective-C, questa sintassi dovrebbe sembrarti familiare-in Swift, questa riga di codice è un programma completo. Non hai bisogno di importare una libreria separata per funzionalità come input/output o gestione delle stringhe, per esempio. Il codice scritto in ambito globale è utilizzato come punto d'ingresso per il programma, in modo da non avere bisogno della funzione <code class="code-voice">main()</code>. Inoltre, non è necessario scrivere il punto e virgola alla fine di ogni istruzione.</p>
<p class="para">Questa panoramica ti fornisce abbastanza informazioni per iniziare a scrivere codice in Swift mostrandoti come risolvere qualche esempio di brevi algoritmi.
Non preoccuparti se non capisci qualcosa: tutto ciò che viene introdotto in questa panoramica è spiegato in dettaglio nei prossimi capitoli.</p>
<!-- You also don’t need to write semicolons at the end of every statement.</p><p class="para">This tour gives you enough information to start writing code in Swift by showing you how to accomplish a variety of programming tasks. Don’t worry if you don’t understand something—everything introduced in this tour is explained in detail in the rest of this book.</p>-->
    		</section> 

        <section class="section">
          <div class="note playground">
            <aside class="aside">
              <p class="aside-title uppercase">Nota</p>
              <p class="para"></p>
              <p class="para">Utilizzando un Mac, scarica il Playground e fai doppio click sul file per aprirlo in Xcode: <a href="https://developer.apple.com/go/?id=swift-tour">https://developer.apple.com/go/?id=swift-tour</a></p>

            </aside>
          </div>
        </section>

      <section class="section">
	<a id="TP40016643-CH2-ID461">&#x200c;</a>
  <h3 class="section-name">Valori semplici</h3>
  <p class="para">Si può utilizzare <code class="code-voice">let</code> per dichiarare una costante e <code class="code-voice">var</code> per dichiarare una variabile. Il valore di una costante non ha bisogno di essere conosciuto in fase di compilazione, ma è necessario assegnargli un valore esattamente una volta. Ciò significa che è possibile utilizzare le costanti per dare un nome ad un valore che dichiari una volta ma che puoi usare in diversi luoghi.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">myVariable</code> = <code class="m">42</code></code></li>
            <li><code class="code-voice"><code class="vc">myVariable</code> = <code class="m">50</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">myConstant</code> = <code class="m">42</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Una costante o una variabile devono avere lo stesso tipo del valore che gli si vuole assegnare. Tuttavia, non è necessario specificare il tipo esplicitamente. Fornendo un valore alla creazione di una costante o di una variabile permette al compilatore di dedurre il suo tipo. Nel prossimo esempio, il compilatore deduce che <code class="code-voice">myVariable</code> è un'intero perchè il suo valore iniziale specificato è un numero intero.</p><p class="para">Se il valore iniziale non fornisce informazioni sufficienti (o se non viene specificato un valore iniziale), specificare il tipo scrivendolo dopo il nome della variabile, separato da due punti.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">implicitInteger</code> = <code class="m">70</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">implicitDouble</code> = <code class="m">70.0</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">explicitDouble</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> = <code class="m">70</code></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Creare una costante impostando come tipo esplicito <code class="code-voice">Float</code> e come valore <code class="code-voice">4</code>.
    	</p>
    
  </aside>
</div><p class="para">I valori non sono mai convertiti implicitamente in un altro tipo. Se avete bisogno di convertire un valore in un tipo diverso, create esplicitamente un'istanza del tipo desiderato.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">label</code> = <code class="s">&quot;The width is &quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">width</code> = <code class="m">94</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">widthLabel</code> = <code class="vc">label</code> + <code class="vc">String</code>(<code class="vc">width</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Provare a rimuovere la conversione a <code class="code-voice">String</code> dall'ultima riga. Quale errore viene visualizzato? 
    	</p>
    
  </aside>
</div><p class="para">C'è un modo ancora più semplice per includere i valori nelle stringhe, scrivendo il loro valore in parentesi e inserendo un backslash (<code class="code-voice">\</code>) prima di esse. Per esempio:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">apples</code> = <code class="m">3</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">oranges</code> = <code class="m">5</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">appleSummary</code> = <code class="s">&quot;I have </code>\(<code class="vc">apples</code>)<code class="s"> apples.&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">fruitSummary</code> = <code class="s">&quot;I have </code>\(<code class="vc">apples</code> + <code class="vc">oranges</code>)<code class="s"> pieces of fruit.&quot;</code></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Utilizzate <code class="code-voice">\()</code> per includere un calcolo in virgola mobile in una stringa e includendo il nome di qualcuno in un saluto.
    	</p>
    
  </aside>
</div><p class="para">Creare gli array e i dizionari utilizzando le parentesi quadre (<code class="code-voice">[]</code>), e accedendo ai loro elementi scrivendo l'indice o la chiave all'interno delle parentesi quadre. È consentito inserire una virgola dopo l'ultimo elemento.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">shoppingList</code> = [<code class="s">&quot;catfish&quot;</code>, <code class="s">&quot;water&quot;</code>, <code class="s">&quot;tulips&quot;</code>, <code class="s">&quot;blue paint&quot;</code>]</code></li>
            <li><code class="code-voice"><code class="vc">shoppingList</code>[<code class="m">1</code>] = <code class="s">&quot;bottle of water&quot;</code></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">occupations</code> = [</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Malcolm&quot;</code>: <code class="s">&quot;Captain&quot;</code>,</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Kaylee&quot;</code>: <code class="s">&quot;Mechanic&quot;</code>,</code></li>
            <li><code class="code-voice">]</code></li>
            <li><code class="code-voice"><code class="vc">occupations</code>[<code class="s">&quot;Jayne&quot;</code>] = <code class="s">&quot;Public Relations&quot;</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Per creare un array o un dizionario vuoto, utilizzare la sintassi di inizializzazione.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">emptyArray</code> = [<code class="vc">String</code>]()</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">emptyDictionary</code> = [<code class="vc">String</code>: <code class="vc">Float</code>]()</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Se le informazioni sul tipo possono essere dedotte, è possibile scrivere un array vuoto come  <code class="code-voice">[]</code> e un dizionario vuoto come <code class="code-voice">[:]</code>—ad esempio, quando si associa un nuovo valore ad una variabile o si passa un argomento ad una funzione.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="vc">shoppingList</code> = []</code></li>
            <li><code class="code-voice"><code class="vc">occupations</code> = [:]</code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40016643-CH2-ID462">&#x200c;</a>
  <h3 class="section-name">Flusso di controllo</h3>
  <p class="para">Utilizzare <code class="code-voice">if</code> e <code class="code-voice">switch</code> per creare condizioni, e utilizzare  <code class="code-voice">for</code>-<code class="code-voice">in</code>, <code class="code-voice">for</code>, <code class="code-voice">while</code>, e <code class="code-voice">repeat</code>-<code class="code-voice">while</code> per creare cicli. Le parentesi attorno alle condizioni o ai cicli sono opzionali. Le parentesi graffe attorno al corpo della condizione o del ciclo sono richieste.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">individualScores</code> = [<code class="m">75</code>, <code class="m">43</code>, <code class="m">103</code>, <code class="m">87</code>, <code class="m">12</code>]</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">teamScore</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">for</code> <code class="vc">score</code> <code class="kt">in</code> <code class="vc">individualScores</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">if</code> <code class="vc">score</code> &gt; <code class="m">50</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">teamScore</code> += <code class="m">3</code></code></li>
            <li><code class="code-voice">    } <code class="kt">else</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">teamScore</code> += <code class="m">1</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">teamScore</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">In un <code class="code-voice">if</code>, la condizione deve essere una espressione booleana-ciò significa che un codice come <code class="code-voice">if score { ... }</code> provoca un errore, e non viene considerato come un confronto implicito con zero.</p><p class="para">È possibile utilizzare <code class="code-voice">if</code> e <code class="code-voice">let</code> assieme per lavorare con valori che potrebbero mancare. Tali valori sono rappresentati come opzionali. Un valore opzionale contiene un valore o contiene <code class="code-voice">nil</code> per indicare che il valore è mancante. Scrivere un punto interrogativo (<code class="code-voice">?</code>) dopo il tipo di un valore per renderlo opzionale.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">optionalString</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>? = <code class="s">&quot;Hello&quot;</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">optionalString</code> == <code class="kt">nil</code>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">optionalName</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>? = <code class="s">&quot;John Appleseed&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">greeting</code> = <code class="s">&quot;Hello!&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">if</code> <code class="kt">let</code> <code class="vc">name</code> = <code class="vc">optionalName</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">greeting</code> = <code class="s">&quot;Hello, </code>\(<code class="vc">name</code>)<code class="s">&quot;</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Cambiare <code class="code-voice">optionalName</code> a <code class="code-voice">nil</code>. Quale saluto viene visualizzato? Aggiungere una clausola  <code class="code-voice">else</code> che imposta un saluto diverso se <code class="code-voice">optionalName</code> è <code class="code-voice">nil</code>.
    	</p>
    
  </aside>
</div><p class="para">Se il valore opzionale è <code class="code-voice">nil</code>, la condizione è <code class="code-voice">false</code> e il codice nelle parentesi graffe viene saltato. In caso contrario, il valore opzionale viene scartato ed assegnato alla costante dopo <code class="code-voice">let</code>, la quale rende il valore scartato disponibile all'interno del blocco di codice.</p><p class="para">Un'altra via per gestire i valori opzionali è fornire un valore di default utilizzando l'operatore <code class="code-voice">??</code>. Se il valore opzionale non è presente, viene utilizzato al suo posto il valore di default.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">nickName</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>? = <code class="kt">nil</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">fullName</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> = <code class="s">&quot;John Appleseed&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">informalGreeting</code> = <code class="s">&quot;Hi </code>\(<code class="vc">nickName</code> ?? <code class="vc">fullName</code>)<code class="s">&quot;</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Gli switch supportano ogni tipo di dati e una grande varietà di operazioni di confronto-essi non sono limitati ai numeri interi o a controlli di uguaglianza.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">vegetable</code> = <code class="s">&quot;red pepper&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">switch</code> <code class="vc">vegetable</code> {</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="s">&quot;celery&quot;</code>:</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Add some raisins and make ants on a log.&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="s">&quot;cucumber&quot;</code>, <code class="s">&quot;watercress&quot;</code>:</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;That would make a good tea sandwich.&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="kt">let</code> <code class="vc">x</code> <code class="kt">where</code> <code class="vc">x</code>.<code class="vc">hasSuffix</code>(<code class="s">&quot;pepper&quot;</code>):</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Is it a spicy </code>\(<code class="vc">x</code>)<code class="s">?&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">default</code>:</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Everything tastes good in soup.&quot;</code>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Provare a rimuovere il caso di default. Quale errore si riceve?
    	</p>
    
  </aside>
</div><p class="para">Si noti come <code class="code-voice">let</code> possa essere utilizzato in un pattern per assegnare il valore che corrisponde a quella parte di pattern o a una costante.<!-- can be used in a pattern to assign the value that matched that part of a pattern to a constant.--></p><p class="para">Dopo l'esecuzione del codice all'interno del caso trovato nello switch, il programma esce dall'istruzione switch. L'esecuzione non continua nel caso successivo, perciò non c'è bisogno di interrompere espressamente lo switch alla fine di ogni blocco di codice dei singoli casi.</p><p class="para">Si utilizzi <code class="code-voice">for</code>-<code class="code-voice">in</code> per iterare elementi di un dizionario fornendo una coppia di nomi da utilizzare per ogni coppia chiave-valore. I dizionari sono collezioni non ordinate, quindi le loro chiavi e i loro valori vengono iterati in ordine arbitrario.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">interestingNumbers</code> = [</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Prime&quot;</code>: [<code class="m">2</code>, <code class="m">3</code>, <code class="m">5</code>, <code class="m">7</code>, <code class="m">11</code>, <code class="m">13</code>],</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Fibonacci&quot;</code>: [<code class="m">1</code>, <code class="m">1</code>, <code class="m">2</code>, <code class="m">3</code>, <code class="m">5</code>, <code class="m">8</code>],</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Square&quot;</code>: [<code class="m">1</code>, <code class="m">4</code>, <code class="m">9</code>, <code class="m">16</code>, <code class="m">25</code>],</code></li>
            <li><code class="code-voice">]</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">largest</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">for</code> (<code class="vc">kind</code>, <code class="vc">numbers</code>) <code class="kt">in</code> <code class="vc">interestingNumbers</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">number</code> <code class="kt">in</code> <code class="vc">numbers</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">if</code> <code class="vc">number</code> &gt; <code class="vc">largest</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">largest</code> = <code class="vc">number</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">largest</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Aggiungi un'altra variabile per tenere traccia di quale tipo di numero e quale numero era il più grande.<!-- Add another variable to keep track of which kind of number was the largest, as well as what that largest number was.-->
    	</p>
    
  </aside>
</div><p class="para">Usare <code class="code-voice">while</code> per ripetere un blocco di codice fino a quando la condizione cambia. La condizione di un ciclo può altrimenti essere specificata alla fine, assicurando così che il ciclo venga eseguito almeno una volta.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">n</code> = <code class="m">2</code></code></li>
            <li><code class="code-voice"><code class="kt">while</code> <code class="vc">n</code> &lt; <code class="m">100</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">n</code> = <code class="vc">n</code> * <code class="m">2</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">n</code>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">m</code> = <code class="m">2</code></code></li>
            <li><code class="code-voice"><code class="kt">repeat</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">m</code> = <code class="vc">m</code> * <code class="m">2</code></code></li>
            <li><code class="code-voice">} <code class="kt">while</code> <code class="vc">m</code> &lt; <code class="m">100</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">m</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">È possibile mantenere un indice all'interno di un ciclo mediante l'utilizzo di <code class="code-voice">..&lt;</code> per creare un intervallo di indici, oppure scrivendo esplicitamente un'inizializzazione, condizione e incremento. Questi due cicli fanno la stessa cosa:<!-- to make a range of indexes or by writing an explicit initialization, condition, and increment. These two loops do the same thing:--></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">firstForLoop</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">for</code> <code class="vc">i</code> <code class="kt">in</code> <code class="m">0</code>..&lt;<code class="m">4</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">firstForLoop</code> += <code class="vc">i</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">firstForLoop</code>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">secondForLoop</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">for</code> <code class="kt">var</code> <code class="vc">i</code> = <code class="m">0</code>; <code class="vc">i</code> &lt; <code class="m">4</code>; ++<code class="vc">i</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">secondForLoop</code> += <code class="vc">i</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">secondForLoop</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Utilizzare <code class="code-voice">..&lt;</code> per creare un intervallo che ometta il suo valore superiore, ed usare <code class="code-voice">...</code> per creare un intervallo che includa entrambi i valori.</p>
  
</section>
<section class="section">
	<a id="TP40016643-CH2-ID463">&#x200c;</a>
  <h3 class="section-name">Funzioni e chiusure</h3>
  <p class="para">Utilizzare <code class="code-voice">func</code> per dichiarare una funzione. Chiamare una funzione specificando il suo nome assieme ad una lista di argomenti tra parentesi. Utilizzare <code class="code-voice">-&gt;</code> per separare i tipi e i nomi dei parametri dal tipo di ritorno della funzione.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">greet</code>(<code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>, <code class="vc">day</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="s">&quot;Hello </code>\(<code class="vc">name</code>)<code class="s">, today is </code>\(<code class="vc">day</code>)<code class="s">.&quot;</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">greet</code>(<code class="s">&quot;Bob&quot;</code>, <code class="vc">day</code>: <code class="s">&quot;Tuesday&quot;</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Rimuovi il parametro <code class="code-voice">day</code>. Aggiungi un parametro per includere un annuncio del pranzo speciale di oggi nel saluto.
    	</p>
    
  </aside>
</div><p class="para">Utilizzare una tupla per creare un valore composto—ad esempio, per ritornare più valori da una funzione. Gli elementi di una tupla possono essere richiamati specificando il nome o il numero.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">calculateStatistics</code>(<code class="vc">scores</code>: [<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>]) -&gt; (<code class="vc">min</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">max</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">sum</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">min</code> = <code class="vc">scores</code>[<code class="m">0</code>]</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">max</code> = <code class="vc">scores</code>[<code class="m">0</code>]</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">sum</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">score</code> <code class="kt">in</code> <code class="vc">scores</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">if</code> <code class="vc">score</code> &gt; <code class="vc">max</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">max</code> = <code class="vc">score</code></code></li>
            <li><code class="code-voice">        } <code class="kt">else</code> <code class="kt">if</code> <code class="vc">score</code> &lt; <code class="vc">min</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">min</code> = <code class="vc">score</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <code class="vc">sum</code> += <code class="vc">score</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">return</code> (<code class="vc">min</code>, <code class="vc">max</code>, <code class="vc">sum</code>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">statistics</code> = <code class="vc">calculateStatistics</code>([<code class="m">5</code>, <code class="m">3</code>, <code class="m">100</code>, <code class="m">3</code>, <code class="m">9</code>])</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">statistics</code>.<code class="vc">sum</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">statistics</code>.<code class="m">2</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Le funzioni possono anche ricevere un numero variabile di argomenti ed inserirli all'interno di un array.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">sumOf</code>(<code class="vc">numbers</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>...) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">sum</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">number</code> <code class="kt">in</code> <code class="vc">numbers</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">sum</code> += <code class="vc">number</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">sum</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">sumOf</code>()</code></li>
            <li><code class="code-voice"><code class="vc">sumOf</code>(<code class="m">42</code>, <code class="m">597</code>, <code class="m">12</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Scrivere una funzione che calcoli la media dei suoi argomenti.
    	</p>
    
  </aside>
</div><p class="para">Le funzioni possono essere innestate. Le funzioni innestate hanno accesso a variabili dichiarate nella funzione di origine. È possibile utilizzare funzioni innestate per organizzare il codice in una funzione lunga o complessa.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">returnFifteen</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">y</code> = <code class="m">10</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">add</code>() {</code></li>
            <li><code class="code-voice">        <code class="vc">y</code> += <code class="m">5</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="vc">add</code>()</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">y</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">returnFifteen</code>()</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Le funzioni sono un tipo di prima classe. Ciò significa che una funzione può restituire un'altra funzione come suo valore.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">makeIncrementer</code>() -&gt; ((<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">addOne</code>(<code class="vc">number</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="m">1</code> + <code class="vc">number</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">addOne</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">increment</code> = <code class="vc">makeIncrementer</code>()</code></li>
            <li><code class="code-voice"><code class="vc">increment</code>(<code class="m">7</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Una funzione può ricevere un'altra funzione come uno dei suoi argomenti.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">hasAnyMatches</code>(<code class="vc">list</code>: [<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>], <code class="vc">condition</code>: (<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">item</code> <code class="kt">in</code> <code class="vc">list</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">if</code> <code class="vc">condition</code>(<code class="vc">item</code>) {</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="kt">true</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="kt">false</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">lessThanTen</code>(<code class="vc">number</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">number</code> &lt; <code class="m">10</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">numbers</code> = [<code class="m">20</code>, <code class="m">19</code>, <code class="m">7</code>, <code class="m">12</code>]</code></li>
            <li><code class="code-voice"><code class="vc">hasAnyMatches</code>(<code class="vc">numbers</code>, <code class="vc">condition</code>: <code class="vc">lessThanTen</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Le funzioni sono in realtà un caso particolare di chiusure: blocchi di codice che possono essere chiamati in un secondo momento. Il codice in una chiusura ha accesso ad elementi come variabili o funzioni disponibili nell'ambito dove la chiusura è stata creata, anche se la chiusura si trova in un ambito diverso durante l'esecuzione-si è già visto un esempio simile nelle funzioni innestante. È possibile scrivere una chiusura senza un nome rinchiudendo il codice in parentesi graffe
(<code class="code-voice">{}</code>). Utilizzare <code class="code-voice">in</code> per separare gli argomenti e il tipo di ritorno dal corpo della chiusura.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="vc">numbers</code>.<code class="vc">map</code>({</code></li>
            <li><code class="code-voice">    (<code class="vc">number</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> <code class="kt">in</code></code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">result</code> = <code class="m">3</code> * <code class="vc">number</code></code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">result</code></code></li>
            <li><code class="code-voice">})</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Riscrivere la chiusura ritornando zero per tutti i numeri dispari.
    	</p>
    
  </aside>
</div><p class="para">Sono disponibili diverse opzioni per la scrittura di chiusure in modo più conciso. Quando il tipo di chiusura è già noto, come la risposta di un delegato, è possibile omettere il tipo dei suoi parametri, il suo tipo di ritorno, o entrambi. Le chiusure a singola istruzione restituiscono implicitamente il valore della loro unica istruzione.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">mappedNumbers</code> = <code class="vc">numbers</code>.<code class="vc">map</code>({ <code class="vc">number</code> <code class="kt">in</code> <code class="m">3</code> * <code class="vc">number</code> })</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">mappedNumbers</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">È possibile fare riferimento ai parametri per numero invece che in base al nome; tale approccio è particolarmente utile in chiusure più corte. Una chiusura passata come ultimo argomento di una funzione può comparire subito dopo le parentesi. Quando una chiusura è l'unico argomento di una funzione, è possibile omettere del tutto le parentesi.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">sortedNumbers</code> = <code class="vc">numbers</code>.<code class="vc">sort</code> { <code class="vc">$0</code> &gt; <code class="vc">$1</code> }</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">sortedNumbers</code>)</code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40016643-CH2-ID464">&#x200c;</a>
  <h3 class="section-name">Oggetti e classi</h3>
  <p class="para">Per creare una classe, scrivere <code class="code-voice">class</code>, seguito dal nome della classe. La dichiarazione di una proprietà in una classe è scritta nello stesso modo di una dichiarazione di una costante o di una variabile, tranne per il fatto che essa è dichiarata nel contesto di una classe. Allo stesso modo, le dichiarazioni di funzioni e metodi sono scritte nella stessa maniera.</p><section class="code-listing">
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">Shape</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">numberOfSides</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;A shape with </code>\(<code class="vc">numberOfSides</code>)<code class="s"> sides.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Si aggiunga una proprietà costante tramite la parola chiave <code class="code-voice">let</code>, e si aggiunga un altro metodo che riceva alcuni argomenti.
    	</p>
    
  </aside>
</div><p class="para">Per creare un'istanza di una classe, inserire le parentesi dopo il nome della classe. Per accedere alle proprietà e ai metodi dell'istanza aggiungere il punto (.) seguito dal nome della proprietà o del metodo.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">shape</code> = <code class="vc">Shape</code>()</code></li>
            <li><code class="code-voice"><code class="vc">shape</code>.<code class="vc">numberOfSides</code> = <code class="m">7</code></code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">shapeDescription</code> = <code class="vc">shape</code>.<code class="vc">simpleDescription</code>()</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">A questa versione della classe <code class="code-voice">Shape</code> manca qualcosa di importante: un'inizializzatore per impostare la classe quando viene creata un'istanza. Utilizzare <code class="code-voice">init</code> per crearne una.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">NamedShape</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">numberOfSides</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">name</code> = <code class="vc">name</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;A shape with </code>\(<code class="vc">numberOfSides</code>)<code class="s"> sides.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Notare come <code class="code-voice">self</code> venga usato per distinguere la proprietà <code class="code-voice">name</code> dall'argomento dell'inizializzatore nominato anch'esso <code class="code-voice">name</code>. Gli argomenti dell'inizializzatore sono passati come una chiamata ad una funzione quando si crea un'istanza della classe. Ogni proprietà ha bisogno di un valore assegnato-sia esso nella sua dichiarazione (come con <code class="code-voice">numberOfSides</code>) o nell'inizializzatore (come con <code class="code-voice">name</code>).</p><p class="para">Utilizzare <code class="code-voice">deinit</code> per creare un deinizializzatore nel caso si abbia bisogno di eseguire delle operazioni di pulizia prima che l'oggetto venga deallocato. </p><p class="para">Le sottoclassi includono il nome della propria superclasse dopo il nome della propria classe, separata da due punti. Non vi è alcun obbligo per le classi di sottoclassare qualsiasi classe radice standard; in tal modo è possibile includere o omettere una superclasse se necessario. </p><p class="para">I metodi in una sottoclasse che sovrascrivono le implementazioni della superclasse sono connotati dalla parola chiave <code class="code-voice">override</code>. Sovrascrivendo un metodo per sbaglio, senza l'utilizzo della parola chiave <code class="code-voice">override</code>, il compilatore rileva un errore. Il compilatore riconosce anche i metodi contraddistinti da <code class="code-voice">override</code> che al momento non sovrascrivono alcun metodo della superclasse.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">Square</code>: <code class="n"><!-- a href="" logicalPath="" -->NamedShape<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">sideLength</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">sideLength</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>, <code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">sideLength</code> = <code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        <code class="kt">super</code>.<code class="kt">init</code>(<code class="vc">name</code>: <code class="vc">name</code>)</code></li>
            <li><code class="code-voice">        <code class="vc">numberOfSides</code> = <code class="m">4</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">area</code>() -&gt;  <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="vc">sideLength</code> * <code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">override</code> <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;A square with sides of length </code>\(<code class="vc">sideLength</code>)<code class="s">.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">test</code> = <code class="vc">Square</code>(<code class="vc">sideLength</code>: <code class="m">5.2</code>, <code class="vc">name</code>: <code class="s">&quot;my test square&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">test</code>.<code class="vc">area</code>()</code></li>
            <li><code class="code-voice"><code class="vc">test</code>.<code class="vc">simpleDescription</code>()</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Creare un'altra sottoclasse di <code class="code-voice">NamedShape</code> chiamata <code class="code-voice">Circle</code> che riceve il raggio e il nome come argomenti del suo inizializzatore. Implementare i metodi <code class="code-voice">area()</code> e <code class="code-voice">simpleDescription()</code> nella classe <code class="code-voice">Circle</code>.
    	</p>
    
  </aside>
</div><p class="para">In aggiunta alle proprietà semplici che vengono memorizzate, le proprietà possono avere dei metodi <i>getter</i> e <i>setter</i>.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">EquilateralTriangle</code>: <code class="n"><!-- a href="" logicalPath="" -->NamedShape<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">sideLength</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> = <code class="m">0.0</code></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">sideLength</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>, <code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">sideLength</code> = <code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        <code class="kt">super</code>.<code class="kt">init</code>(<code class="vc">name</code>: <code class="vc">name</code>)</code></li>
            <li><code class="code-voice">        <code class="vc">numberOfSides</code> = <code class="m">3</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">perimeter</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">get</code> {</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="m">3.0</code> * <code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <code class="kt">set</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">sideLength</code> = <code class="vc">newValue</code> / <code class="m">3.0</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">override</code> <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;An equilateral triangle with sides of length </code>\(<code class="vc">sideLength</code>)<code class="s">.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">triangle</code> = <code class="vc">EquilateralTriangle</code>(<code class="vc">sideLength</code>: <code class="m">3.1</code>, <code class="vc">name</code>: <code class="s">&quot;a triangle&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangle</code>.<code class="vc">perimeter</code>)</code></li>
            <li><code class="code-voice"><code class="vc">triangle</code>.<code class="vc">perimeter</code> = <code class="m">9.9</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangle</code>.<code class="vc">sideLength</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Nel metodo setter di <code class="code-voice">perimeter</code>, il nuovo valore ha il nome implicito <code class="code-voice">newValue</code>. È possibile fornire un nome esplicito nelle parentesi dopo <code class="code-voice">set</code>.</p><p class="para">Notare che l'inizializzatore per la classe <code class="code-voice">EquilateralTriangle</code> svolge tre diverse fasi:</p><ol class="list-number">
  <li class="item"><p class="para">Impostazione del valore delle proprietà dichiarate dalle sottoclassi.</p></li><li class="item"><p class="para">Chiamata all'inizializzatore della superclasse.</p></li><li class="item"><p class="para">Cambio del valore della proprietà definita dalla superclasse. Qualsiasi altra impostazione aggiuntiva che utilizza metodi, getter o setter può essere svolta a questo punto.</p></li>
</ol><p class="para">Se non è necessario elaborare la proprietà, ma è comunque necessario fornire del codice che viene eseguito prima e dopo dell'impostazione del nuovo valore, utilizzare i metodi <code class="code-voice">willSet</code> e <code class="code-voice">didSet</code>. Il codice che viene fornito viene eseguito ogni volta che il valore cambia all'infuori di un inizializzatore. Per esempio, la seguente classe assicura che la lunghezza del lato del triangolo è sempre uguale alla lunghezza del lato del suo quadrato.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">TriangleAndSquare</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">triangle</code>: <code class="n"><!-- a href="" logicalPath="" -->EquilateralTriangle<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">willSet</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">square</code>.<code class="vc">sideLength</code> = <code class="vc">newValue</code>.<code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">square</code>: <code class="n"><!-- a href="" logicalPath="" -->Square<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">willSet</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">triangle</code>.<code class="vc">sideLength</code> = <code class="vc">newValue</code>.<code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">size</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>, <code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="vc">square</code> = <code class="vc">Square</code>(<code class="vc">sideLength</code>: <code class="vc">size</code>, <code class="vc">name</code>: <code class="vc">name</code>)</code></li>
            <li><code class="code-voice">        <code class="vc">triangle</code> = <code class="vc">EquilateralTriangle</code>(<code class="vc">sideLength</code>: <code class="vc">size</code>, <code class="vc">name</code>: <code class="vc">name</code>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">triangleAndSquare</code> = <code class="vc">TriangleAndSquare</code>(<code class="vc">size</code>: <code class="m">10</code>, <code class="vc">name</code>: <code class="s">&quot;another test shape&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangleAndSquare</code>.<code class="vc">square</code>.<code class="vc">sideLength</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangleAndSquare</code>.<code class="vc">triangle</code>.<code class="vc">sideLength</code>)</code></li>
            <li><code class="code-voice"><code class="vc">triangleAndSquare</code>.<code class="vc">square</code> = <code class="vc">Square</code>(<code class="vc">sideLength</code>: <code class="m">50</code>, <code class="vc">name</code>: <code class="s">&quot;larger square&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangleAndSquare</code>.<code class="vc">triangle</code>.<code class="vc">sideLength</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Quando si lavora con valori opzionali, è possibile scrivere <code class="code-voice">?</code> prima di operazioni come metodi, proprietà e sottoscrizioni.<!-- subscripting -->. Se il valore prima di <code class="code-voice">?</code> è <code class="code-voice">nil</code>, tutto ciò che è presente dopo <code class="code-voice">?</code> è ignorato e il valore dell'intera espressione è <code class="code-voice">nil</code>. In caso contrario, il valore opzionale è scartato e tutto ciò che è presente dopo il <code class="code-voice">?</code> agisce sul valore scartato. In entrambi i casi, il valore dell'intera espressione è un valore opzionale.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">optionalSquare</code>: <code class="n"><!-- a href="" logicalPath="" -->Square<!-- /a --></code>? = <code class="vc">Square</code>(<code class="vc">sideLength</code>: <code class="m">2.5</code>, <code class="vc">name</code>: <code class="s">&quot;optional square&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">sideLength</code> = <code class="vc">optionalSquare</code>?.<code class="vc">sideLength</code></code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40016643-CH2-ID465">&#x200c;</a>
  <h3 class="section-name">Enumerazioni e strutture</h3>
  <p class="para">Utilizzare <code class="code-voice">enum</code> per creare un'enumerazione. Come le classi e tutti gli altri tipi nominali, gli enumeratori possono avere metodi associati ad essi.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">Rank</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Ace</code> = <code class="m">1</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Two</code>, <code class="vc">Three</code>, <code class="vc">Four</code>, <code class="vc">Five</code>, <code class="vc">Six</code>, <code class="vc">Seven</code>, <code class="vc">Eight</code>, <code class="vc">Nine</code>, <code class="vc">Ten</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Jack</code>, <code class="vc">Queen</code>, <code class="vc">King</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">switch</code> <code class="kt">self</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Ace</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;ace&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Jack</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;jack&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Queen</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;queen&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">King</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;king&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">default</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="vc">String</code>(<code class="kt">self</code>.<code class="vc">rawValue</code>)</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">ace</code> = <code class="vc">Rank</code>.<code class="vc">Ace</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">aceRawValue</code> = <code class="vc">ace</code>.<code class="vc">rawValue</code></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Scrivere una funzione che confronta due valori <code class="code-voice">Rank</code> confrontando i loro valori puri.
    	</p>
    
  </aside>
</div><p class="para">Nell'esempio precedente, il tipo di valore puro dell'enumeratore è <code class="code-voice">Int</code>, quindi è necessario specificare solamente il primo valore puro. Il resto dei valori puri vengono assegnati in ordine. È anche possibile utilizzare stringhe o numeri in virgola mobile come tipi puri di un'enumerazione. Utilizzare la proprietà <code class="code-voice">rawValue</code> per accedere al valore puro di un caso di enumerazione. </p><p class="para">Utilizzare l'inizializzatore <code class="code-voice">init?(rawValue:)</code> per creare un'istanza di un'enumerazione partendo da un valore puro.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">if</code> <code class="kt">let</code> <code class="vc">convertedRank</code> = <code class="vc">Rank</code>(<code class="vc">rawValue</code>: <code class="m">3</code>) {</code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">threeDescription</code> = <code class="vc">convertedRank</code>.<code class="vc">simpleDescription</code>()</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">I valori dei casi di un'enumerazione non sono solo un'altro modo di scrivere i valori puri ma sono valori veri e propri. Infatti, nei casi in cui non esista un valore puro significativo, non c'è bisogno di fornirne uno.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">Suit</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Spades</code>, <code class="vc">Hearts</code>, <code class="vc">Diamonds</code>, <code class="vc">Clubs</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">switch</code> <code class="kt">self</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Spades</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;spades&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Hearts</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;hearts&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Diamonds</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;diamonds&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Clubs</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;clubs&quot;</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">hearts</code> = <code class="vc">Suit</code>.<code class="vc">Hearts</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">heartsDescription</code> = <code class="vc">hearts</code>.<code class="vc">simpleDescription</code>()</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Aggiungere un metodo <code class="code-voice">color()</code> all'enumeratore <code class="code-voice">Suit</code> che ritorni "black" per picche e fiori oppure "red" per cuori e quadri.
    	</p>
    
  </aside>
</div><p class="para">Notare i due modi in cui si fa riferimento al caso di enumerazione <code class="code-voice">Hearts</code>: assegnando un valore alla costante <code class="code-voice">hearts</code>, il caso di enumerazione <code class="code-voice">Suit.Hearts</code> è referenziato tramite il suo nome completo poichè la costante non ha un tipo esplicito specificato. All'interno dello switch, il caso di enumerazione è referenziato dalla forma abbreviata <code class="code-voice">.Hearts</code> poichè il valore di <code class="code-voice">self</code> è già noto essere un tipo di seme. È possibile utilizzare la forma abbreviata ogni volta che il tipo del valore è già conosciuto. </p><p class="para">Utilizzare <code class="code-voice">struct</code> per creare una struttura. Le strutture supportano molti dei comportamenti forniti dalle classi, inclusi i metodi e gli inizializzatori. Una delle differenze più importanti tra strutture e classi è che le strutture sono sempre copiate in memoria quando vengono passate nel codice (ad esempio all'interno di funzioni), mentre le classi sono passate per riferimento.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">Card</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">rank</code>: <code class="n"><!-- a href="" logicalPath="" -->Rank<!-- /a --></code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">suit</code>: <code class="n"><!-- a href="" logicalPath="" -->Suit<!-- /a --></code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;The </code>\(<code class="vc">rank</code>.<code class="vc">simpleDescription</code>())<code class="s"> of </code>\(<code class="vc">suit</code>.<code class="vc">simpleDescription</code>())<code class="s">&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">threeOfSpades</code> = <code class="vc">Card</code>(<code class="vc">rank</code>: .<code class="vc">Three</code>, <code class="vc">suit</code>: .<code class="vc">Spades</code>)</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">threeOfSpadesDescription</code> = <code class="vc">threeOfSpades</code>.<code class="vc">simpleDescription</code>()</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Aggiungere un metodo a <code class="code-voice">Card</code> che crea un mazzo completo di carte, con una carta per ogni combinazione di punteggio e seme.
    	</p>
    
  </aside>
</div><p class="para">Un'istanza di un caso di enumerazione può avere valori associati con l'istanza. Istanze dello stesso caso di enumerazione possono avere differenti valori associati ad esso. Si forniscano i valori associati quando l'istanza viene creata. I valori associati e i valori puri sono diversi: il valore puro di un caso di enumerazione è lo stesso per tutte le istanze, mentre il valore puro viene fornito quando si definisce l'enumerazione.</p><p class="para">Per esempio, si consideri il caso in cui si chieda l'orario di alba e tramonto da un server. Il server può rispondere con le informazioni o con un errore.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">ServerResponse</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Result</code>(<code class="vc">String</code>, <code class="vc">String</code>)</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Error</code>(<code class="vc">String</code>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">success</code> = <code class="vc">ServerResponse</code>.<code class="vc">Result</code>(<code class="s">&quot;6:00 am&quot;</code>, <code class="s">&quot;8:09 pm&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">failure</code> = <code class="vc">ServerResponse</code>.<code class="vc">Error</code>(<code class="s">&quot;Out of cheese.&quot;</code>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">switch</code> <code class="vc">success</code> {</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="kt">let</code> .<code class="vc">Result</code>(<code class="vc">sunrise</code>, <code class="vc">sunset</code>):</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Sunrise is at </code>\(<code class="vc">sunrise</code>)<code class="s"> and sunset is at </code>\(<code class="vc">sunset</code>)<code class="s">.&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="kt">let</code> .<code class="vc">Error</code>(<code class="vc">error</code>):</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Failure...  </code>\(<code class="vc">error</code>)<code class="s">&quot;</code>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Aggiungere un terzo caso a <code class="code-voice">ServerResponse</code> e allo switch.
    	</p>
    
  </aside>
</div><p class="para">Notare come gli orari di alba e tramonto sono estratti dal valore <code class="code-voice">ServerResponse</code> come parte dell'associazione tra il valore e i casi dello switch.</p>
  
</section>
<section class="section">
	<a id="TP40016643-CH2-ID466">&#x200c;</a>
  <h3 class="section-name">Protocolli ed estensioni</h3>
  <p class="para">Utilizzare <code class="code-voice">protocol</code> per dichiarare un protocollo.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">protocol</code> <code class="vc">ExampleProtocol</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">simpleDescription</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> { <code class="kt">get</code> }</code></li>
            <li><code class="code-voice">    <code class="kt">mutating</code> <code class="kt">func</code> <code class="vc">adjust</code>()</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Classi, enumeratori e strutture supportano i protocolli.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SimpleClass</code>: <code class="n"><!-- a href="" logicalPath="" -->ExampleProtocol<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">simpleDescription</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> = <code class="s">&quot;A very simple class.&quot;</code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">anotherProperty</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> = <code class="m">69105</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">adjust</code>() {</code></li>
            <li><code class="code-voice">        <code class="vc">simpleDescription</code> += <code class="s">&quot;  Now 100% adjusted.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">a</code> = <code class="vc">SimpleClass</code>()</code></li>
            <li><code class="code-voice"><code class="vc">a</code>.<code class="vc">adjust</code>()</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">aDescription</code> = <code class="vc">a</code>.<code class="vc">simpleDescription</code></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">SimpleStructure</code>: <code class="n"><!-- a href="" logicalPath="" -->ExampleProtocol<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">simpleDescription</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> = <code class="s">&quot;A simple structure&quot;</code></code></li>
            <li><code class="code-voice">    <code class="kt">mutating</code> <code class="kt">func</code> <code class="vc">adjust</code>() {</code></li>
            <li><code class="code-voice">        <code class="vc">simpleDescription</code> += <code class="s">&quot; (adjusted)&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">b</code> = <code class="vc">SimpleStructure</code>()</code></li>
            <li><code class="code-voice"><code class="vc">b</code>.<code class="vc">adjust</code>()</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">bDescription</code> = <code class="vc">b</code>.<code class="vc">simpleDescription</code></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Scrivere un'enumeratore che sia conforme a questo protocollo.
    	</p>
    
  </aside>
</div><p class="para">Notare l'utilizzo della parole chiave <code class="code-voice">mutating</code> nella dichiarazione di <code class="code-voice">SimpleStructure</code> per contrassegnare un metodo che modifica la struttura. La dichiarazione di <code class="code-voice">SimpleClass</code> non ha bisogno di nessuno dei suoi metodi contrassegnati come mutating perchè i metodi in una classe possono sempre modificare la classe. </p><p class="para">Utilizzare <code class="code-voice">extension</code> per aggiungere funzionalità ad un tipo esistente, come nuovi metodi o proprietà calcolate. È possibile utilizzare un'estensione per rendere conforme un tipo ad un determinato protocollo dichiarato da qualche altra parte, oppure un tipo importato da una libreria o un framework.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">extension</code> <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>: <code class="n"><!-- a href="" logicalPath="" -->ExampleProtocol<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">simpleDescription</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;The number </code>\(<code class="kt">self</code>)<code class="s">&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">mutating</code> <code class="kt">func</code> <code class="vc">adjust</code>() {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code> += <code class="m">42</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="m">7</code>.<code class="vc">simpleDescription</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Scrivere un estensione per il tipo <code class="code-voice">Double</code> che aggiunga la proprietà <code class="code-voice">absoluteValue</code>.
    	</p>
    
  </aside>
</div><p class="para">È possibile utilizzare il nome di un protocollo come un qualsiasi altro tipo nominale-per esempio, per creare una collezione di oggetti che possiede diversi tipi ma che sono tutti conformi ad un singolo protocollo. Quando si lavora con valori il cui tipo è un tipo protocollo, i metodi all'infuori della definizione del protocollo non sono disponibili.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">protocolValue</code>: <code class="n"><!-- a href="" logicalPath="" -->ExampleProtocol<!-- /a --></code> = <code class="vc">a</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">protocolValue</code>.<code class="vc">simpleDescription</code>)</code></li>
            <li><code class="code-voice"><code class="c">// print(protocolValue.anotherProperty)  // Uncomment to see the error</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Anche se la variabile <code class="code-voice">protocolValue</code> in fase di esecuzione è di tipo <code class="code-voice">SimpleClass</code>, il compilatore li considera come tipo <code class="code-voice">ExampleProtocol</code>. Ciò significa che non è possibile accedere accidentalmente a metodi o proprietà che la classe implementa in aggiunta alla conformità al suo protocollo.</p>
  
</section>
<section class="section">
	<a id="TP40016643-CH2-NoLink_19">&#x200c;</a>
  <h3 class="section-name">Generici</h3>
  <p class="para">Scrivere un nome all'interno di parentesi angolari per creare una funzione o un tipo generico.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">repeatItem</code>&lt;<code class="vc">Item</code>&gt;(<code class="vc">item</code>: <code class="n"><!-- a href="" logicalPath="" -->Item<!-- /a --></code>, <code class="vc">numberOfTimes</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; [<code class="n"><!-- a href="" logicalPath="" -->Item<!-- /a --></code>] {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">result</code> = [<code class="n"><!-- a href="" logicalPath="" -->Item<!-- /a --></code>]()</code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="kt">_</code> <code class="kt">in</code> <code class="m">0</code>..&lt;<code class="vc">numberOfTimes</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">result</code>.<code class="vc">append</code>(<code class="vc">item</code>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">result</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">repeatItem</code>(<code class="s">&quot;knock&quot;</code>, <code class="vc">numberOfTimes</code>:<code class="m">4</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">È possibile creare funzioni, metodi, classi, enumeratori e strutture generiche.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="c">// Reimplement the Swift standard library&#39;s optional type</code></code></li>
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">OptionalValue</code>&lt;<code class="vc">Wrapped</code>&gt; {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">None</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Some</code>(<code class="vc">Wrapped</code>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">possibleInteger</code>: <code class="n"><!-- a href="" logicalPath="" -->OptionalValue<!-- /a --></code>&lt;<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>&gt; = .<code class="vc">None</code></code></li>
            <li><code class="code-voice"><code class="vc">possibleInteger</code> = .<code class="vc">Some</code>(<code class="m">100</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Utilizzare <code class="code-voice">where</code> dopo il nome del tipo per specificare una lista di requisiti—per esempio, per richiedere il tipo per implementare un protocollo, o richiedere che due tipi siano uguali, o per richiedere che una classe abbia una particolare superclasse.</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">anyCommonElements</code> &lt;<code class="vc">T</code>: <code class="n"><!-- a href="" logicalPath="" -->SequenceType<!-- /a --></code>, <code class="vc">U</code>: <code class="n"><!-- a href="" logicalPath="" -->SequenceType<!-- /a --></code> <code class="kt">where</code> <code class="n"><!-- a href="" logicalPath="" -->T<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Generator<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Element<!-- /a --></code>: <code class="vc">Equatable</code>, <code class="n"><!-- a href="" logicalPath="" -->T<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Generator<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Element<!-- /a --></code> == <code class="n"><!-- a href="" logicalPath="" -->U<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Generator<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Element<!-- /a --></code>&gt; (<code class="vc">lhs</code>: <code class="n"><!-- a href="" logicalPath="" -->T<!-- /a --></code>, <code class="kt">_</code> <code class="vc">rhs</code>: <code class="n"><!-- a href="" logicalPath="" -->U<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">lhsItem</code> <code class="kt">in</code> <code class="vc">lhs</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">for</code> <code class="vc">rhsItem</code> <code class="kt">in</code> <code class="vc">rhs</code> {</code></li>
            <li><code class="code-voice">            <code class="kt">if</code> <code class="vc">lhsItem</code> == <code class="vc">rhsItem</code> {</code></li>
            <li><code class="code-voice">                <code class="kt">return</code> <code class="kt">true</code></code></li>
            <li><code class="code-voice">            }</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="kt">false</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">anyCommonElements</code>([<code class="m">1</code>, <code class="m">2</code>, <code class="m">3</code>], [<code class="m">3</code>])</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Prova!</p>
    	<p class="para">Modificare la funzione <code class="code-voice">anyCommonElements(_:_:)</code> per creare una funzione che ritorni un array di elementi che le due sequenze hanno in comune.
    	</p>
    
  </aside>
</div><p class="para">Scrivere <code class="code-voice">&lt;T: Equatable&gt;</code> è come scrivere <code class="code-voice">&lt;T where T: Equatable&gt;</code>.</p>
  
</section>

  </article>
</div>

    </div>
  </body>
</html>
